{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cxr72\\\\Documents\\\\github\\\\meanStack dev\\\\project-client-the-mern-clan\\\\src\\\\components\\\\taskComponents\\\\AllCards.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AllCards = props => {\n  _s();\n\n  const [allCards, setAllCards] = useState([]);\n  useEffect(() => {\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    let data = {\n      groupId: \"6075a3c80f096601ccb9c0e1\"\n    };\n    axios.get(\"http://localhost:5000/api/task/card\", headers, data).then(response => {\n      console.log(response);\n      let temp = response.data;\n      temp.map((card, index) => {\n        let c = {\n          value: card.value,\n          checklists: card.checklists,\n          labels: card.labels,\n          dueDate: card.dueDate,\n          description: card.description,\n          comments: card.comments,\n          cover: card.cover,\n          attachment: card.attachment,\n          groupKey: card.group,\n          cardId: card._id\n        };\n        setAllCards([...allCards, c]);\n      });\n    });\n  }, []);\n  const group = props.group;\n  return group.cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n    index: index,\n    card: card,\n    group: group,\n    onCardsChange: props.onCardsChange\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this));\n};\n\n_s(AllCards, \"TWRC8TZE+LLq87FHpZeBvl8w1Sw=\");\n\n_c = AllCards;\nexport default AllCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCards\");","map":{"version":3,"sources":["C:/Users/cxr72/Documents/github/meanStack dev/project-client-the-mern-clan/src/components/taskComponents/AllCards.js"],"names":["React","useState","useEffect","Card","axios","AllCards","props","allCards","setAllCards","headers","data","groupId","get","then","response","console","log","temp","map","card","index","c","value","checklists","labels","dueDate","description","comments","cover","attachment","groupKey","group","cardId","_id","cards","onCardsChange"],"mappings":";;;AAAA,SAASA,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIO,OAAO,GAAG;AACb,sBAAgB;AADH,KAAd;AAGA,QAAIC,IAAI,GAAG;AACVC,MAAAA,OAAO,EAAE;AADC,KAAX;AAIAP,IAAAA,KAAK,CACHQ,GADF,CACM,qCADN,EAC6CH,OAD7C,EACsDC,IADtD,EAEEG,IAFF,CAEQC,QAAD,IAAc;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAIG,IAAI,GAAGH,QAAQ,CAACJ,IAApB;AACAO,MAAAA,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,YAAIC,CAAC,GAAG;AACPC,UAAAA,KAAK,EAAEH,IAAI,CAACG,KADL;AAEPC,UAAAA,UAAU,EAAEJ,IAAI,CAACI,UAFV;AAGPC,UAAAA,MAAM,EAAEL,IAAI,CAACK,MAHN;AAIPC,UAAAA,OAAO,EAAEN,IAAI,CAACM,OAJP;AAKPC,UAAAA,WAAW,EAAEP,IAAI,CAACO,WALX;AAMPC,UAAAA,QAAQ,EAAER,IAAI,CAACQ,QANR;AAOPC,UAAAA,KAAK,EAAET,IAAI,CAACS,KAPL;AAQPC,UAAAA,UAAU,EAAEV,IAAI,CAACU,UARV;AASPC,UAAAA,QAAQ,EAAEX,IAAI,CAACY,KATR;AAUPC,UAAAA,MAAM,EAAEb,IAAI,CAACc;AAVN,SAAR;AAYAzB,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcc,CAAd,CAAD,CAAX;AACA,OAdD;AAeA,KApBF;AAqBA,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,QAAMU,KAAK,GAAGzB,KAAK,CAACyB,KAApB;AACA,SAAOA,KAAK,CAACG,KAAN,CAAYhB,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,kBACtB,QAAC,IAAD;AAEC,IAAA,KAAK,EAAEA,KAFR;AAGC,IAAA,IAAI,EAAED,IAHP;AAIC,IAAA,KAAK,EAAEY,KAJR;AAKC,IAAA,aAAa,EAAEzB,KAAK,CAAC6B;AALtB,KACMf,KADN;AAAA;AAAA;AAAA;AAAA,UADM,CAAP;AASA,CA5CD;;GAAMf,Q;;KAAAA,Q;AA8CN,eAAeA,QAAf","sourcesContent":["import { React, useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport axios from \"axios\";\r\n\r\nconst AllCards = (props) => {\r\n\tconst [allCards, setAllCards] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet headers = {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t};\r\n\t\tlet data = {\r\n\t\t\tgroupId: \"6075a3c80f096601ccb9c0e1\",\r\n\t\t};\r\n\r\n\t\taxios\r\n\t\t\t.get(\"http://localhost:5000/api/task/card\", headers, data)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tconsole.log(response);\r\n\t\t\t\tlet temp = response.data;\r\n\t\t\t\ttemp.map((card, index) => {\r\n\t\t\t\t\tlet c = {\r\n\t\t\t\t\t\tvalue: card.value,\r\n\t\t\t\t\t\tchecklists: card.checklists,\r\n\t\t\t\t\t\tlabels: card.labels,\r\n\t\t\t\t\t\tdueDate: card.dueDate,\r\n\t\t\t\t\t\tdescription: card.description,\r\n\t\t\t\t\t\tcomments: card.comments,\r\n\t\t\t\t\t\tcover: card.cover,\r\n\t\t\t\t\t\tattachment: card.attachment,\r\n\t\t\t\t\t\tgroupKey: card.group,\r\n\t\t\t\t\t\tcardId: card._id,\r\n\t\t\t\t\t};\r\n\t\t\t\t\tsetAllCards([...allCards, c]);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst group = props.group;\r\n\treturn group.cards.map((card, index) => (\r\n\t\t<Card\r\n\t\t\tkey={index}\r\n\t\t\tindex={index}\r\n\t\t\tcard={card}\r\n\t\t\tgroup={group}\r\n\t\t\tonCardsChange={props.onCardsChange}\r\n\t\t/>\r\n\t));\r\n};\r\n\r\nexport default AllCards;\r\n"]},"metadata":{},"sourceType":"module"}